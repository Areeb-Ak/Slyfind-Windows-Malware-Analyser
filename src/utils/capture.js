import { exec } from 'child_process'
import { join } from 'node:path'

const { app } = require('electron')

const runcap = async (command) => {
  console.log('current directory: ', process.cwd())
  console.log('Executing Command :', command)
  return new Promise((resolve, reject) => {
    exec(command, (error, stdout, stderr) => {
      if (error) {
        // console.error(`Error: ${error.message}`);
        reject(error.message)
        return
      }
      console.log('Stdout', stdout)
      if (stderr) {
        // console.error(`stderr: ${stderr}`);
        reject(stderr)
        return
      }
      resolve()
    })
  })
}

const capturecap = async (filepath, duration) => {
  const appPath = app.getAppPath('userData')
  const tshark_path = join(appPath, 'extraResources', 'tshark', 'tshark.exe').replace(/\\app\.asar\\/g, '\\')

  const output_path = join(appPath, 'extraResources', 'tshark', 'output').replace(/\\app\.asar\\/g, '\\')
  if (!filepath) {
    try {
      filepath = join(output_path, 'custom.pcap')
      await runcap(`${tshark_path} -i Wi-Fi -a duration:${duration} -w ${filepath}`)
    } catch {
      /* empty */
    }
  }
  try {
    process.chdir(join(appPath, 'extraResources', 'cic_flow', 'bin').replace(/\\app\.asar\\/g, '\\'))
    await runcap(`cfm.bat ${filepath} ${output_path}`)
  } catch {
    /* empty */
  }
  try {
    const python_path = join(appPath, 'extraResources', 'cic_flow', 'model', 'running_3.py').replace(/\\app\.asar\\/g, '\\')
    const pkl_path = join(appPath, 'extraResources', 'cic_flow', 'model', 'pickles').replace(/\\app\.asar\\/g, '\\')
    await runcap(`python3 ${python_path} ${filepath} ${output_path} ${duration} ${pkl_path}`)
  } catch {
    /* empty */
  }
}

export default capturecap
