import { Worker } from 'worker_threads'
import { readdirSync } from 'fs'
import { join } from 'node:path'

const { app } = require('electron')

const appPath = app.getAppPath('userData')

const runner_path = join(appPath, 'extraResources', 'v3', 'volatility_runner.exe').replace(
  /\\app\.asar\\/g,
  '\\'
)

function runModule(memdump) {
  return new Promise((resolve, reject) => {
    let modules = ['pslist', 'dlllist', 'handles', 'malfind', 'modules', 'svcscan', 'callbacks']
    let completedWorkers = 0

    const handleWorkerCompletion = () => {
      completedWorkers++
      if (completedWorkers === modules.length) {
        console.log('All workers completed')
        resolve()
      }
    }
    for (let i = 0; i < modules.length; i++) {
      const worker = new Worker(join(appPath, 'src', 'utils', 'worker.js'))

      const outputFile = join(
        appPath,
        'extraResources',
        'v3',
        'output',
        `${modules[i]}.json`
      ).replace(/\\app\.asar\\/g, '\\')

      // Listening for messages from the worker thread
      worker.on('message', () => {
        worker.terminate()
        handleWorkerCompletion()
      })
      worker.on('error', (error) => {
        console.error(`Error in worker: ${error}`)
        reject(error)
      })

      // Sending data to the worker thread
      let command = `${runner_path}^${modules[i]}^${memdump}^${outputFile}`

      worker.postMessage(command)
    }
  })
}

async function ldr_async(memdump, plugin) {
  return new Promise((resolve, reject) => {
    const worker = new Worker(join(appPath, 'src', 'utils', 'worker.js'))

    const outputFile = join(appPath, 'extraResources', 'v3', 'output', `${plugin}.txt`).replace(
      /\\app\.asar\\/g,
      '\\'
    )

    worker.on('message', () => {
      worker.terminate()
      resolve()
    })
    worker.on('error', (error) => {
      console.error(`Error in worker: ${error}`)
      reject(error)
    })

    let command = `${runner_path}^${plugin}^${memdump}^${outputFile}`
    worker.postMessage(command)
  })
}

function listRawFilesWithSpaces() {
  const appPath = app.getAppPath('userData')
  let result = ''
  let memfile = join(appPath, 'extraResources', 'exec').replace(/\\app\.asar\\/g, '\\')
  readdirSync(memfile).forEach((file) => {
    if (file.endsWith('.raw') || file.endsWith('.mem') || file.endsWith('.dmp')) {
      const filePath = join(appPath, 'extraResources', 'exec', file).replace(/\\app\.asar\\/g, '\\')
      result += filePath
    } else {
      return false
    }
  })
  return result
}

export { listRawFilesWithSpaces, ldr_async, runModule }
