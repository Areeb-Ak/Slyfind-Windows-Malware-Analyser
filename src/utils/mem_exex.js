import { exec } from "child_process";
import fs from "fs";
import path from "path";
import { listRawFilesWithSpaces } from "../utils/non_worker";

function checkForTmpFile() {
  const memfile = "exec";
  const directoryPath = path.join(__dirname, `../../src/${memfile}`);
  const files = fs.readdirSync(directoryPath);
  const tmpFile = files.find((file) => file.endsWith(".tmp"));

  if (tmpFile) {
    // File exists, wait and check again
    console.log(`Waiting for ${tmpFile} to vanish...`);
    setTimeout(() => checkForTmpFile(directoryPath), 1000); // Check again after 1 second
  } else {
    // No file with ".tmp" extension found, proceed to the next part
    console.log(`No .tmp file found. Proceeding to the next part.\n`);
  }
}

function executeCommand(fileName, args) {
  if (listRawFilesWithSpaces()) {
    return new Promise((resolve, reject) => {
      resolve();
      return;
    });
  }
  const command = `${path.join(
    __dirname,
    "../../src/exec"
  )}\\${fileName} ${args.join(" ")}`;
  console.log("command", command);

  return new Promise((resolve, reject) => {
    exec(command, (error, stdout, stderr) => {
      if (error) {
        console.error(`Error: ${error.message}`);
        reject(error.message);
        return;
      }

      if (stderr) {
        console.error(`stderr: ${stderr}`);
        reject(stderr);
        return;
      }
      resolve();
    });
  });
}

export { executeCommand, checkForTmpFile };
