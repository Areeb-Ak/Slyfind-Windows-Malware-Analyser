import { app, shell, BrowserWindow, ipcMain } from 'electron'
import { join } from 'node:path'
import { electronApp, optimizer, is } from '@electron-toolkit/utils'
import processAndWriteToCSV from '../utils/csv'
import { listRawFilesWithSpaces, ldr_async, runModule } from '../utils/non_worker'
import { executeCommand, checkForTmpFile } from '../utils/mem_exex'
import runmodel from '../utils/model'
import plyse from '../utils/pdf'
import capturecap from '../utils/capture'
import readAndParseCSV from '../utils/csv_reader'
import rm from '../utils/remove'

function createWindow() {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    width: 900,
    height: 670,
    show: false,
    fullscreen: true,
    autoHideMenuBar: true,
    webPreferences: {
      preload: join(__dirname, '../preload/index.js'),
      sandbox: false
    }
  })

  mainWindow.on('ready-to-show', () => {
    mainWindow.show()
  })

  mainWindow.webContents.setWindowOpenHandler((details) => {
    shell.openExternal(details.url)
    return { action: 'deny' }
  })

  // HMR for renderer base on electron-vite cli.
  // Load the remote URL for development or the local html file for production.
  if (is.dev && process.env['ELECTRON_RENDERER_URL']) {
    mainWindow.loadURL(process.env['ELECTRON_RENDERER_URL'])
  } else {
    mainWindow.loadFile(join(__dirname, '../renderer/index.html'))
  }
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(() => {
  // Set app user model id for windows
  electronApp.setAppUserModelId('com.electron')

  // Default open or close DevTools by F12 in development
  // and ignore CommandOrControl + R in production.
  // see https://github.com/alex8088/electron-toolkit/tree/master/packages/utils
  app.on('browser-window-created', (_, window) => {
    optimizer.watchWindowShortcuts(window)
  })

  // IPC test
  ipcMain.on('ping', () => console.log('pong'))

  createWindow()

  app.on('activate', function () {
    // On macOS it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) createWindow()
  })
})

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

// In this file you can include the rest of your app"s specific main process
// code. You can also put them in separate files and require them here.

ipcMain.handle('create-memdump', async (event, filename, args) => {
  try {
    await executeCommand(filename, args)
    checkForTmpFile()
  } catch (error) {
    console.error('Error executing command:', error)

    // You can send an error message back to the renderer process if needed
    event.sender.send('create-memdump-error', error)

    throw error
  }
})

ipcMain.handle('process-dump', async (event, filepath) => {
  try {
    if (!filepath) {
      filepath = listRawFilesWithSpaces()
    }
    filepath = `"${filepath}"`
    console.log(filepath)
    await ldr_async(filepath, 'ldrmodules')
    await runModule(filepath)
    // exec(`rm ${filepath}`);
  } catch (error) {
    console.error('Error fetching data:', error)
    // You can send an error message back to the renderer process if needed
    event.sender.send('process-dump-error', error)

    throw error
  }
})

let csvpath
ipcMain.handle('custom-file', async (event) => {
  try {
    csvpath = processAndWriteToCSV()
  } catch (error) {
    console.error('Error :', error)

    // You can send an error message back to the renderer process if needed
    event.sender.send('custom-file-error-error', error)

    throw error
  }
})

ipcMain.handle('test-model', async (event) => {
  try {
    return await runmodel(csvpath)
  } catch (error) {
    console.error('Error :', error)

    // You can send an error message back to the renderer process if needed
    event.sender.send('Test Model Error', error)

    throw error
  }
})

ipcMain.handle('pdf-analyse', async (event, pdfpath) => {
  try {
    return await plyse(pdfpath)
  } catch (error) {
    console.error('Error :', error)

    // You can send an error message back to the renderer process if needed
    event.sender.send('Test Model Error', error)

    throw error
  }
})

ipcMain.handle('network-capture', async (event, pcappath) => {
  try {
    const duration = 20
    await capturecap(pcappath, duration)
    const appPath = app.getAppPath('userData')
    const pred_path = join(appPath, 'extraResources', 'tshark', 'output', 'predictions.csv').replace(/\\app\.asar\\/g, '\\')
    const data = await readAndParseCSV(pred_path)
    const result = {}
    data.forEach((element) => {
      if (element['Label'] in result) {
        result[element['Label']]++
      } else {
        result[element['Label']] = 1
      }
    })
    rm(join(appPath, 'extraResources', 'tshark', 'output').replace(/\\app\.asar\\/g, '\\'))
    return result
  } catch (error) {
    console.error('Error :', error)

    // You can send an error message back to the renderer process if needed
    event.sender.send('Test Model Error', error)

    throw error
  }
})
